### Ranger facilities
# Compatible with ranger 1.4.2 through 1.6.*
#
# Automatically change the directory in bash after closing ranger
#
# This is a bash function for .bashrc to automatically change the directory to
# the last visited one after ranger quits.
# To undo the effect of this function, you can type "cd -" to return to the
# original directory. Ranger facility -- Auto cd to last dir
function ranger_cd() {
    tempfile='/tmp/chosendir'
    /usr/bin/env ranger --choosedir="$tempfile" "${@:-$(pwd)}"
    test -f "$tempfile" &&
    if [ "$(cat -- "$tempfile")" != "$(echo -n `pwd`)" ]; then
        cd -- "$(cat "$tempfile")"
    fi
    rm -f -- "$tempfile"
}
bindkey -s '^S' 'ranger_cd\n'

# Set HTTP Proxy
# I use COW in my local machine as proxy
#export http_proxy="127.0.0.1:8087"
#export RSYNC_PROXY="127.0.0.1:8087"
proxy_COW="127.0.0.1:6954"
function switch_proxy {
    if [ "$http_proxy" = "" ]; then
        echo "Switch proxy to $proxy_COW"
        export http_proxy=$proxy_COW
    else
        echo "Turn proxy off"
        export http_proxy=""
    fi
}
alias p="switch_proxy"
#export http_proxy=$proxy_COW

# Scan all the text contents under the directory
function scantext {
    for i in `ls $1`; do
        if [ -d "$i" ]; then
            pushd "$i" >/dev/null
            scandir
            popd >/dev/null
        elif [ -f "$i" ]; then
            file "$i" | grep "text" >/dev/null && cat "$i"
        fi
    done
}

# Show stastics message of top used commands
function topcmds {
    history 1 | awk '{a[$2]++}END{for (i in a){print a[i] " " i}}' | sort -rn | head
}

# Change directory into next dirty git repository
function gitnextdirty {
    update_repo_status.sh
    d=`tag -f Dirty | head -n 1`
    test -z "$d" && echo "No more dirty git repo!" || cd "$d"
    git status -s
}

# ghc-pkg-reset
# Removes all installed GHC/cabal packages, but not binaries, docs, etc.
# Use this to get out of dependency hell and start over, at the cost of some rebuilding time.
function ghc-pkg-reset() {
    echo -n 'erasing all your user ghc and cabal packages - are you sure (y/n) ? ' 
    read ans
    test x$ans == xy && ( \
        echo 'erasing directories under ~/.ghc'; rm -rf `find ~/.ghc -maxdepth 1 -type d`; \
        echo 'erasing ~/.cabal/lib'; rm -rf ~/.cabal/lib; \
        # echo 'erasing ~/.cabal/packages'; rm -rf ~/.cabal/packages; \
        # echo 'erasing ~/.cabal/share'; rm -rf ~/.cabal/share; \
        )
}

# require: percol -- an interactive pipeline tool
## search zsh history
function exists { which $1 &> /dev/null }

if exists percol; then
    function percol_select_history() {
        local tac
        exists gtac && tac="gtac" || { exists tac && tac="tac" || { tac="tail -r" } }
        BUFFER=$(fc -l -n 1 | eval $tac | percol --query "$LBUFFER")
        CURSOR=$#BUFFER         # move cursor
        zle -R -c               # refresh
    }

    zle -N percol_select_history
    bindkey '^R' percol_select_history
fi

# a good way to navigate through file systems
# helper clipboard function
[ $(uname -s | grep -c CYGWIN) -eq 1 ] && OS_NAME="CYGWIN" || OS_NAME=`uname -s`
function pclip() {
    if [[ $OS_NAME == "CYGWIN" ]]; then
        putclip $@;
    elif [[ $OS_NAME == Darwin ]]; then
        pbcopy $@;
    else
        if [[ -x /usr/bin/xsel ]]; then
            xsel -ib $@;
        else
            if [[ -x /usr/bin/xclip ]]; then
                xclip -selection c $@;
            else
                echo "Neither xsel or xclip is installed!"
            fi
        fi
    fi
}

# Usage: Type "ff partials-of-file-path" in the bash shell. A filter window will popup. You can filter and scroll down/up in that window to select one file. The full path of the file will be copied into system clipboard automatically (under Linux, you need install either xsel or xclip to access clipboard).
#
# The paritls-of-file-path could contain wildcard character. For example, "â€¦/grunt-docs/*bootstrap*css" is a fine example.
function ff()
{
    local fullpath=$*
    local filename=${fullpath##*/} # remove "/" from the beginning
    filename=${filename##*./} # remove  ".../" from the beginning
    echo file=$filename
    #  only the filename without path is needed
    # filename should be reasonable
    local cli=`find $PWD \
            -not -iwholename '*/target/*' \
            -not -iwholename '*.svn*' \
            -not -iwholename '*.git*' \
            -not -iwholename '*.sass-cache*' \
            -not -iwholename '*.hg*' \
            -type f -iwholename '*'${filename}'*' \
            -print | percol`
    echo ${cli}
    echo -n ${cli} |pclip;
}
